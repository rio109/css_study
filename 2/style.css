* {
    box-sizing: border-box;
}

body {
    /* web default 8px */
    margin: 0;
}

#product-overview {
    background-color: red;
    width: 100%;
    height: 500px;
    /* content-box ( default : 기본값 , 요소의 가로 새로의 콘텐츠 영역만을 기준으로 계산
    padding , border는 계산하지 않고 증가한다.
    실제 요소의 크기 = width + padding + border

    border-box ( 패딩, 테두리를 포함한 전체 크기를 계산한다. ) 즉 width와 height 안에 조정된다.
    요소 크기 = width + (padding - border)    

    box-sizing: border-box는 실무에서 더 자주 사용됩니다. 이유는:
    사이즈 계산 단순화: 요소의 전체 크기가 명확히 정의되므로, 레이아웃을 설계하거나 요소를 배치할 때 더 직관적입니다.
    예측 가능성: 패딩과 테두리가 포함되므로, 요소 크기 계산이 혼란스러워지지 않습니다.

    */
}

h1 {
    margin: 0px;
}

.section-title {
    color: green;
    font-family: inherit;
}

#product-overview h1 {
    color: white;
    font-family: 'Anton', sans-serif;
}

.main-header {
    width: 100%;
    background-color: #2ddf5c;
    padding: 8px 16px;
}

.main-header__brand {
    color: #0e4f1f;
    text-decoration: none;
    font-weight: bolder;
    font-size: 22px;
}


.main-header>div {
    display: inline-block;
    vertical-align: middle;
}

.main-nav {
    display: inline-block;
    text-align: right;
    width: calc(100% - 74px);
    vertical-align: middle;
}

.main-nav__items {
    margin: 0;
    padding: 0;
    list-style: none;
}

.main-nav__item {
    display: inline-block;
}




/* 박스 모델 

html 요소는 네가지 주요 부분으로 구성된다.
content : 요소의 실제 내용 
padding : content와 border 사이의 내부 여백 (내부 여백) : 요소 내부의 여백 조절, content와 border의 사이 공간 확보
border : 요소를 감싸는 테두리 (테두리) : 시각적인 테두리를 추가하여 요소를 강조 : 특징이 테두리 두께 색상 스타일 설정 가능
margin: border의 바깥쪽 공간, 요소간의 외부 여백 ( 외부 여백 ) : 핵심은 요소간의 간격 설정, 다른 요소와의 거리 조절


속성	역할	위치	배경색/스타일 반영
margin	요소 외부 공간	Border 외부	배경색/스타일     없음
padding	요소 내부 공간	Content와 Border 사이	   배경색 반영
border	요소의 테두리	Padding 바깥, Margin 안쪽	스타일 반영 가능

외부    테두리   내부    콘텐츠
maring border padding content

| Margin (외부 여백) |
  --------------------
  | Border (테두리)  |
    ----------------
    | Padding       |
      ------------
      | Content    |
      ------------


총 너비 = Content Width + Padding Left + Padding Right + Border Left + Border Right + Margin Left + Margin Right
총 높이 = Content Height + Padding Top + Padding Bottom + Border Top + Border Bottom + Margin Top + Margin Bottom


div {
    width: 100px;
    height: 50px;
    padding: 10px;
    border: 5px solid black;
    margin: 15px;
}

총 너비 = 100 + 10 + 10 + 5 + 5 + 15 + 15 = 160px
총 높이 = 50 + 10 + 10 + 5 + 5 + 15 + 15 = 110px


*/

/* 바깥쪽 여백(Margin)을 설정할 때 예기치 못한 결과가 발생할 수 있습니다.

각 요소에 바깥쪽 여백을 설정했는데 인접한 두 요소가 바깥쪽 여백 하나를 공유하는 이유가 무엇인가요?

강의 영상에서처럼 <section> 과 같은 부모 요소가 갑자기 <h1>과 같은 자식 요소의 바깥쪽 여백을 차지하는 이유는 무엇인가요?

이는 여백 상쇄(margin collapsing) 현상과 관련 있습니다. 다음의 글에서 자세히 알아볼 수 있습니다: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing

기본적인 사례가 세 가지는 다음과 같습니다.

둘 다 바깥쪽 여백을 가진 인접 형제 요소

첫째 및/또는 마지막 (혹은 유일한)의 자식 요소에 바깥쪽 여백이 설정된 하나 또는 둘 이상의 자식 요소를 가진 부모 요소

콘텐츠, 안쪽 여백, 테두리와 높이가 지정되지 않은 요소

사례를 함께 살펴봅시다.

1. 인접 형제

첫 번째 요소의 바깥쪽 여백이 10px (좌우상하 모두), 두 번째 요소의 바깥쪽 여백이 5px (또는 20px - 값은 상관없음)일 경우입니다.

CSS는 여백을 상쇄하고 두 요소 중 큰 값의 바깥쪽 여백을 추가합니다. 바깥쪽 여백이 
각각 10px, 5px라면 두 요소 사이에 바깥쪽 여백 10px이 추가될까요?

2. 바깥쪽 여백이 설정된 자식 요소를 가진 부모 요소

첫 번째 및/또는 마지막 혹은 유일한 자식 요소에 바깥쪽 여백 (상단 및/또는 하단)이 설정된 경우입니다. 
이 경우 부모 요소의 바깥쪽 여백은 자식 요소(들)의 바깥쪽 여백과 함께 상쇄됩니다. 마찬가지로 크기가 큰 바깥쪽 여백이 이기고 부모 요소에 적용됩니다.

부모 요소에 안쪽 여백, 인라인 콘텐츠 (자식 요소는 제외) 또는 테두리가 설정된 경우에는 
이 동작이 발생하지 않고 자식 요소의 바깥쪽 여백이 콘텐츠를 감싸는 부모 요소에 추가됩니다.

3. 바깥쪽 여백이 설정된 빈 요소

이러한 경우는 자주 발생하지 않지만, 콘텐츠, 안쪽 여백, 테두리, 높이가 설정되지 않은 요소의 경우, 
상단과 하단의 바깥쪽 여백은 하나의 단일한 바깥쪽 여백으로 병합됩니다. 다시 말해 큰 값이 이깁니다. */


/* BEM 모델??  */

/* display option display="none","black","inline" */

/* 

 display: none
동작: 해당 요소가 화면에 표시되지 않음. 즉, 렌더링되지 않음.
공간 차지: 요소가 사라지며, 해당 요소가 차지하던 공간도 제거됩니다.
이벤트 처리: 요소가 보이지 않기 때문에, 마우스 클릭 등의 이벤트도 발생하지 않습니다.
특징: DOM에는 여전히 존재하지만, 화면에 나타나지 않음.


display: block
동작: 해당 요소가 블록 요소로 표시됨.
공간 차지: 요소는 부모 컨테이너의 전체 가로폭을 차지하며, 다음 요소는 새 줄로 이동.
특징: <div>, <p> 등은 기본적으로 블록 요소로 동작.


display: inline
동작: 해당 요소가 인라인 요소로 표시됨.
공간 차지: 요소가 필요한 만큼의 너비만 차지하며, 옆에 다른 인라인 요소를 배치할 수 있음.
특징: <span>, <a> 등은 기본적으로 인라인 요소로 동작.
차이점: 인라인 요소는 크기 조정을 위해 width, height 속성을 사용할 수 없습니다.


속성	화면 표시	공간 차지	기본 동작 예시
none	안 보임	공간 차지 X	숨겨진 상태
block	블록 요소	부모 컨테이너 가로폭 전체 차지	<div>, <p>
inline	인라인 요소	내용만큼만 차지	<span>, <a> 해당 태그의 콘텐츠(내용

*/

/* 
display: none (디스플레이: 없음)과 visibility: hidden (가시성: 숨김)의 차이
display: none;  을 살펴보았습니다. 이 값은 문서 대열에서 요소를 제거합니다. 이는 요소가 보이지 않게 됨을 의미하며 ‘해당 위치를 차단’하지 않습니다. 다른 요소들이 해당 공간을 차지할 수 있고 실제로도 차지합니다.

그런데 공간을 차지하지 않게 할 방법이 있습니다.

요소를 숨기지만 해당 공간은 유지하고 싶은 경우 (예컨대, 다른 요소가 그 빈 자리를 채우지 않도록), visibility: hidden(가시성: 숨김)을 사용할 수 있습니다.

다음은 display: none의 예입니다:

.box-1 {
    display: none;
}
 
.box-2 {
    display: inline-block;
}
다음을 렌더링합니다.

x  

box-2클래스를 갖는 x 를 렌더링하고 첫 번째 요소는 표시하지 않습니다. 여전히 DOM의 일부이지만, JavaScript 등을 통해 액세스할 수 있습니다.

다음은 visibility: hidden 의 예입니다:

.box-1 {
    visibility: hidden;
}
 
.box-2 {
    display: inline-block;
}
다음을 렌더링합니다.

_x 

_ 는 빈자리이며  x 는 box-2클래스를 갖는 요소입니다.

요소에서 단순히 가시성만 사라진 경우, 문서 대열에서 제거되지 않으며 당연히 DOM에서도 제거되지 않습니다.


CSS 주제는 아니지만 관련이 있는 내용입니다. 블록 레벨 요소와 인라인 요소의 차이.

다음 링크에서 좀 더 자세한 내용을 볼 수 있습니다 (HTML에 관한 유튜브 동영상 포함): https://academind.com/learn/html/beginner-s-guide/diving-deeper-into-html#block-level-vs-inline-elements

핵심 요약

블록 레벨 요소는 블록으로 렌더링하므로 가능한 모든 수평 공간을 차지합니다. 상단 바깥쪽 여백(margin-top)과 하단 바깥쪽 여백(margin-bottom)을 설정하면 두 개의 블록 레벨 요소는 서로 다른 라인에 렌더링됩니다.

예로는 <div> , <section> , <article> , <nav>  가 있으며<h1> , <h2>  , <p> 등도 블록 레벨 요소에 포함됩니다.

반면 인라인 요소는 콘텐츠가 들어가는 데 필요한 공간만을 차지합니다. 따라서 두 개의 인라인 요소는 같은 라인에 들어갑니다 (다만 결합된 콘텐츠가 전체 공간을 차지하는 경우에는 다음 라인으로 넘어감).

인라인 요소는 박스 모델을 사용하며 상단 바깥쪽 여백과 하단 바깥쪽 여백은 요소에 영향을 미치지 않습니다. 상단 안쪽 여백과 하단 안쪽 여백 또한 요소에 영향을 미치지 않습니다. 인라인 요소는 인접 콘텐츠를 밀어내지 않지만, 요소의 테두리에서는 밀어냅니다. 다음 링크의 글에서 이 동작에 대해 자세히 알아볼 수 있습니다.

: https://hacks.mozilla.org/2015/03/understanding-inline-box-model/

또한 인라인 요소에 너비와 높이를 설정해도 아무 효과가 없습니다. 너비와 높이는 콘텐츠가 필요로 하는 공간을 차지하도록 자동 설정됩니다.

인라인 요소가 여러 행으로 된 텍스트 레이아웃을 깨뜨리는 것은 바람직하지 않으므로 논리적으로 맞지 않죠. 블록 레벨 동작과 인라인 동작이 모두 필요한 경우에는 display: inline-block을 설정하여 동작을 병합하면 됩니다.

예시 요소: <a> , <span> , <img> 



속성	inline	inline-block
배치 방식	같은 줄에서 다른 요소와 나란히 배치	같은 줄에서 다른 요소와 나란히 배치
크기 조정	width 및 height 적용 불가	width 및 height 적용 가능
기본 공간 차지	콘텐츠의 크기만큼 차지	콘텐츠 크기 또는 지정된 크기만큼 차지
새 줄 차지 여부	아니요	아니요


. inline
배치 방식: 인라인 요소로 동작하며, 다른 요소와 한 줄에 나란히 배치됩니다.
크기 조정: width, height 속성을 적용할 수 없습니다.
공간 차지: 요소의 내용(텍스트나 이미지) 크기만큼 공간을 차지합니다.
사용 예: <span>, <a>, <strong> 등.

inline-block
배치 방식: 인라인 요소처럼 한 줄에 다른 요소와 나란히 배치됩니다.
크기 조정: width, height 속성을 사용할 수 있습니다.
공간 차지: 블록 요소처럼 너비와 높이를 지정할 수 있으며, 그 크기만큼 공간을 차지합니다.
사용 예: 버튼, 메뉴 아이템 등 크기를 조정하면서 한 줄에 배치하고 싶은 요소.


작동 조건
vertical-align은 주로 인라인, 인라인-블록, 또는 표 셀(table-cell) 요소에서 동작합니다.
부모 요소의 라인 높이(line-height) 또는 기준선이 기준이 됩니다.
자주 헷갈리는 점
vertical-align: middle은 부모의 높이에서 정확히 가운데 정렬하는 속성이 아님!
기준은 **부모의 기준선(baseline)**과 요소의 **중간(middle)**입니다.
전체 높이에 대해 정확히 가운데 정렬하려면 flexbox 또는 grid를 사용하는 것이 더 적합합니다.


*/